/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { authenticate } from '../fn/authentication/authenticate';
import { Authenticate$Params } from '../fn/authentication/authenticate';
import { AuthenticationResponse } from '../models/authentication-response';
import { confirm } from '../fn/authentication/confirm';
import { Confirm$Params } from '../fn/authentication/confirm';
import { register } from '../fn/authentication/register';
import { Register$Params } from '../fn/authentication/register';
import { refreshToken, RefreshToken$Params } from '../fn/authentication/refresh-token';
import { requestPasswordReset, RequestPasswordReset$Params } from '../fn/authentication/request-password-reset';
import { resetPassword, ResetPassword$Params } from '../fn/authentication/reset-password';

@Injectable({ providedIn: 'root' })
export class AuthenticationService extends BaseService {
  private apiUrl = 'http://localhost:8081/api/v1/auth'; // Ensure base URL is correctly defined

  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Register User */
  register(params: Register$Params, context?: HttpContext): Observable<{}> {
    return register(this.http, this.rootUrl, params, context).pipe(
      map((r: StrictHttpResponse<{}>): {} => r.body)
    );
  }

  /** Authenticate User */
  authenticate(params: Authenticate$Params, context?: HttpContext): Observable<AuthenticationResponse> {
    return authenticate(this.http, this.rootUrl, params, context).pipe(
      map((r: StrictHttpResponse<AuthenticationResponse>): AuthenticationResponse => r.body)
    );
  }

  /** Confirm Account Activation */
  confirm(params: Confirm$Params, context?: HttpContext): Observable<void> {
    return confirm(this.http, this.rootUrl, params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Request Password Reset */
  requestPasswordReset(params: RequestPasswordReset$Params, context?: HttpContext): Observable<string> {
    return requestPasswordReset(this.http, this.rootUrl, params, context).pipe(
      map((r: StrictHttpResponse<string>): string => r.body)
    );
  }

  /** Reset Password */
  resetPassword(token: string, newPassword: string): Observable<{ message: string }> {
    const requestBody = { token, newPassword };
    return this.http.post<{ message: string }>(`${this.apiUrl}/reset-password`, requestBody);
  }

  /** Refresh Token */
  refreshToken(params: RefreshToken$Params, context?: HttpContext): Observable<AuthenticationResponse> {
    return refreshToken(this.http, this.rootUrl, params, context).pipe(
      map((r: StrictHttpResponse<AuthenticationResponse>): AuthenticationResponse => r.body)
    );
  }

  /** Request Unban */
  requestUnban(email: string): Observable<string> {
    return this.http.post<string>(`${this.apiUrl}/request-unban?email=${email}`, {});
  }
}
