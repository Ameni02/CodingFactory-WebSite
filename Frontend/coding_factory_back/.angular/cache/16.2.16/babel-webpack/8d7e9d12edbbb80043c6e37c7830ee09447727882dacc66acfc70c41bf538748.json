{"ast":null,"code":"import { Subject } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class CourseService {\n  constructor(http) {\n    this.http = http;\n    this.apiUrl = 'http://localhost:8080/api/formations'; // Backend API URL\n    this.courses = [];\n    this.coursesSubject = new Subject();\n  }\n  // Get the observable list of courses (from local state)\n  getCourses() {\n    return this.coursesSubject.asObservable();\n  }\n  // Set courses to update the local state\n  setCourses(courses) {\n    this.courses = courses;\n    this.coursesSubject.next(this.courses); // Notify the subscribers\n  }\n  // Fetch all courses from the backend\n  getAllCourses() {\n    return this.http.get(`${this.apiUrl}/all`);\n  }\n  // Fetch non-archived courses from the backend\n  getAllNonArchivedCourses() {\n    return this.http.get(`${this.apiUrl}/non-archivees`);\n  }\n  // Fetch a specific course by ID\n  getCourseById(id) {\n    return this.http.get(`${this.apiUrl}/${id}`);\n  }\n  // Add a new course with a PDF to the backend\n  uploadCourseWithPdf(title, file) {\n    const formData = new FormData();\n    formData.append('titre', title);\n    formData.append('file', file);\n    return this.http.post(`${this.apiUrl}/upload`, formData);\n  }\n  // Download a PDF associated with a course\n  downloadPdf(courseId) {\n    return this.http.get(`${this.apiUrl}/pdf/${courseId}`, {\n      responseType: 'blob'\n    });\n  }\n  // Archive a course\n  archiveCourse(courseId) {\n    return this.http.put(`${this.apiUrl}/archive/${courseId}`, {});\n  }\n  // Unarchive a course\n  unarchiveCourse(courseId) {\n    return this.http.put(`${this.apiUrl}/unarchive/${courseId}`, {});\n  }\n  // Add a course locally and notify the subscribers\n  addCourse(course) {\n    this.courses.push(course);\n    this.coursesSubject.next(this.courses); // Notify the subscribers\n  }\n\n  static {\n    this.ɵfac = function CourseService_Factory(t) {\n      return new (t || CourseService)(i0.ɵɵinject(i1.HttpClient));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: CourseService,\n      factory: CourseService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"names":["Subject","CourseService","constructor","http","apiUrl","courses","coursesSubject","getCourses","asObservable","setCourses","next","getAllCourses","get","getAllNonArchivedCourses","getCourseById","id","uploadCourseWithPdf","title","file","formData","FormData","append","post","downloadPdf","courseId","responseType","archiveCourse","put","unarchiveCourse","addCourse","course","push","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["C:\\Users\\HP\\Desktop\\CodingFactory-WebSite\\Frontend\\coding_factory_back\\src\\app\\Modules\\Courses\\courses.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable, Subject } from 'rxjs';\nimport { Course } from './models/course.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CourseService {\n  private apiUrl = 'http://localhost:8080/api/formations'; // Backend API URL\n\n  private courses: Course[] = [];\n  private coursesSubject = new Subject<Course[]>();\n\n  constructor(private http: HttpClient) {}\n\n  // Get the observable list of courses (from local state)\n  getCourses(): Observable<Course[]> {\n    return this.coursesSubject.asObservable();\n  }\n\n  // Set courses to update the local state\n  private setCourses(courses: Course[]) {\n    this.courses = courses;\n    this.coursesSubject.next(this.courses);  // Notify the subscribers\n  }\n\n  // Fetch all courses from the backend\n  getAllCourses(): Observable<Course[]> {\n    return this.http.get<Course[]>(`${this.apiUrl}/all`);\n  }\n\n  // Fetch non-archived courses from the backend\n  getAllNonArchivedCourses(): Observable<Course[]> {\n    return this.http.get<Course[]>(`${this.apiUrl}/non-archivees`);\n  }\n\n  // Fetch a specific course by ID\n  getCourseById(id: number): Observable<Course> {\n    return this.http.get<Course>(`${this.apiUrl}/${id}`);\n  }\n\n  // Add a new course with a PDF to the backend\n  uploadCourseWithPdf(title: string, file: File): Observable<Course> {\n    const formData = new FormData();\n    formData.append('titre', title);\n    formData.append('file', file);\n\n    return this.http.post<Course>(`${this.apiUrl}/upload`, formData);\n  }\n\n  // Download a PDF associated with a course\n  downloadPdf(courseId: number): Observable<Blob> {\n    return this.http.get(`${this.apiUrl}/pdf/${courseId}`, { responseType: 'blob' });\n  }\n\n  // Archive a course\n  archiveCourse(courseId: number): Observable<void> {\n    return this.http.put<void>(`${this.apiUrl}/archive/${courseId}`, {});\n  }\n\n  // Unarchive a course\n  unarchiveCourse(courseId: number): Observable<void> {\n    return this.http.put<void>(`${this.apiUrl}/unarchive/${courseId}`, {});\n  }\n\n  // Add a course locally and notify the subscribers\n  addCourse(course: Course): void {\n    this.courses.push(course);\n    this.coursesSubject.next(this.courses);  // Notify the subscribers\n  }\n}\n"],"mappings":"AAEA,SAAqBA,OAAO,QAAQ,MAAM;;;AAM1C,OAAM,MAAOC,aAAa;EAMxBC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IALhB,KAAAC,MAAM,GAAG,sCAAsC,CAAC,CAAC;IAEjD,KAAAC,OAAO,GAAa,EAAE;IACtB,KAAAC,cAAc,GAAG,IAAIN,OAAO,EAAY;EAET;EAEvC;EACAO,UAAUA,CAAA;IACR,OAAO,IAAI,CAACD,cAAc,CAACE,YAAY,EAAE;EAC3C;EAEA;EACQC,UAAUA,CAACJ,OAAiB;IAClC,IAAI,CAACA,OAAO,GAAGA,OAAO;IACtB,IAAI,CAACC,cAAc,CAACI,IAAI,CAAC,IAAI,CAACL,OAAO,CAAC,CAAC,CAAE;EAC3C;EAEA;EACAM,aAAaA,CAAA;IACX,OAAO,IAAI,CAACR,IAAI,CAACS,GAAG,CAAW,GAAG,IAAI,CAACR,MAAM,MAAM,CAAC;EACtD;EAEA;EACAS,wBAAwBA,CAAA;IACtB,OAAO,IAAI,CAACV,IAAI,CAACS,GAAG,CAAW,GAAG,IAAI,CAACR,MAAM,gBAAgB,CAAC;EAChE;EAEA;EACAU,aAAaA,CAACC,EAAU;IACtB,OAAO,IAAI,CAACZ,IAAI,CAACS,GAAG,CAAS,GAAG,IAAI,CAACR,MAAM,IAAIW,EAAE,EAAE,CAAC;EACtD;EAEA;EACAC,mBAAmBA,CAACC,KAAa,EAAEC,IAAU;IAC3C,MAAMC,QAAQ,GAAG,IAAIC,QAAQ,EAAE;IAC/BD,QAAQ,CAACE,MAAM,CAAC,OAAO,EAAEJ,KAAK,CAAC;IAC/BE,QAAQ,CAACE,MAAM,CAAC,MAAM,EAAEH,IAAI,CAAC;IAE7B,OAAO,IAAI,CAACf,IAAI,CAACmB,IAAI,CAAS,GAAG,IAAI,CAAClB,MAAM,SAAS,EAAEe,QAAQ,CAAC;EAClE;EAEA;EACAI,WAAWA,CAACC,QAAgB;IAC1B,OAAO,IAAI,CAACrB,IAAI,CAACS,GAAG,CAAC,GAAG,IAAI,CAACR,MAAM,QAAQoB,QAAQ,EAAE,EAAE;MAAEC,YAAY,EAAE;IAAM,CAAE,CAAC;EAClF;EAEA;EACAC,aAAaA,CAACF,QAAgB;IAC5B,OAAO,IAAI,CAACrB,IAAI,CAACwB,GAAG,CAAO,GAAG,IAAI,CAACvB,MAAM,YAAYoB,QAAQ,EAAE,EAAE,EAAE,CAAC;EACtE;EAEA;EACAI,eAAeA,CAACJ,QAAgB;IAC9B,OAAO,IAAI,CAACrB,IAAI,CAACwB,GAAG,CAAO,GAAG,IAAI,CAACvB,MAAM,cAAcoB,QAAQ,EAAE,EAAE,EAAE,CAAC;EACxE;EAEA;EACAK,SAASA,CAACC,MAAc;IACtB,IAAI,CAACzB,OAAO,CAAC0B,IAAI,CAACD,MAAM,CAAC;IACzB,IAAI,CAACxB,cAAc,CAACI,IAAI,CAAC,IAAI,CAACL,OAAO,CAAC,CAAC,CAAE;EAC3C;;;;uBA9DWJ,aAAa,EAAA+B,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;IAAA;EAAA;;;aAAblC,aAAa;MAAAmC,OAAA,EAAbnC,aAAa,CAAAoC,IAAA;MAAAC,UAAA,EAFZ;IAAM;EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}