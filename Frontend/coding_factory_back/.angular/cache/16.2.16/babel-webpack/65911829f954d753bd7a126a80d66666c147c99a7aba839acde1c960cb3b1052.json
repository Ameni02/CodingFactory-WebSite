{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class CourseService {\n  constructor(http) {\n    this.http = http;\n    this.apiUrl = 'http://localhost:8080/api/formations'; // âœ… URL du backend\n  }\n  // ðŸ”¹ RÃ©cupÃ©rer toutes les formations\n  getAllCourses() {\n    return this.http.get(`${this.apiUrl}/all`);\n  }\n  // ðŸ”¹ RÃ©cupÃ©rer une formation par ID\n  getCourseById(id) {\n    return this.http.get(`${this.apiUrl}/${id}`);\n  }\n  // ðŸ”¹ Ajouter une formation avec un PDF\n  uploadCourseWithPdf(title, file) {\n    const formData = new FormData();\n    formData.append('titre', title);\n    formData.append('file', file);\n    return this.http.post(`${this.apiUrl}/upload`, formData);\n  }\n  // ðŸ”¹ TÃ©lÃ©charger un PDF\n  downloadPdf(courseId) {\n    return this.http.get(`${this.apiUrl}/pdf/${courseId}`, {\n      responseType: 'blob'\n    });\n  }\n  // ðŸ”¹ Archiver une formation\n  archiveCourse(courseId) {\n    return this.http.put(`${this.apiUrl}/archive/${courseId}`, {});\n  }\n  // ðŸ”¹ DÃ©sarchiver une formation\n  unarchiveCourse(courseId) {\n    return this.http.put(`${this.apiUrl}/unarchive/${courseId}`, {});\n  }\n  // ðŸ”¹ RÃ©cupÃ©rer uniquement les formations non archivÃ©es\n  getAllNonArchivedCourses() {\n    return this.http.get(`${this.apiUrl}/non-archivees`);\n  }\n  static {\n    this.Éµfac = function CourseService_Factory(t) {\n      return new (t || CourseService)(i0.ÉµÉµinject(i1.HttpClient));\n    };\n  }\n  static {\n    this.Éµprov = /*@__PURE__*/i0.ÉµÉµdefineInjectable({\n      token: CourseService,\n      factory: CourseService.Éµfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"names":["CourseService","constructor","http","apiUrl","getAllCourses","get","getCourseById","id","uploadCourseWithPdf","title","file","formData","FormData","append","post","downloadPdf","courseId","responseType","archiveCourse","put","unarchiveCourse","getAllNonArchivedCourses","i0","ÉµÉµinject","i1","HttpClient","factory","Éµfac","providedIn"],"sources":["C:\\Users\\HP\\Desktop\\CodingFactory-WebSite\\Frontend\\coding_factory_back\\src\\app\\Modules\\Courses\\courses.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class CourseService {  // âœ… Garde le nom CourseService\n  private apiUrl = 'http://localhost:8080/api/formations'; // âœ… URL du backend\n\n  constructor(private http: HttpClient) {}\n\n  // ðŸ”¹ RÃ©cupÃ©rer toutes les formations\n  getAllCourses(): Observable<any[]> {  \n    return this.http.get<any[]>(`${this.apiUrl}/all`);\n  }\n\n  // ðŸ”¹ RÃ©cupÃ©rer une formation par ID\n  getCourseById(id: number): Observable<any> {  \n    return this.http.get<any>(`${this.apiUrl}/${id}`);\n  }\n\n  // ðŸ”¹ Ajouter une formation avec un PDF\n  uploadCourseWithPdf(title: string, file: File): Observable<any> {  \n    const formData = new FormData();\n    formData.append('titre', title);\n    formData.append('file', file);\n\n    return this.http.post<any>(`${this.apiUrl}/upload`, formData);\n  }\n\n  // ðŸ”¹ TÃ©lÃ©charger un PDF\n  downloadPdf(courseId: number): Observable<Blob> {  \n    return this.http.get(`${this.apiUrl}/pdf/${courseId}`, { responseType: 'blob' });\n  }\n\n  // ðŸ”¹ Archiver une formation\n  archiveCourse(courseId: number): Observable<void> {  \n    return this.http.put<void>(`${this.apiUrl}/archive/${courseId}`, {});\n  }\n\n  // ðŸ”¹ DÃ©sarchiver une formation\n  unarchiveCourse(courseId: number): Observable<void> {  \n    return this.http.put<void>(`${this.apiUrl}/unarchive/${courseId}`, {});\n  }\n\n  // ðŸ”¹ RÃ©cupÃ©rer uniquement les formations non archivÃ©es\n  getAllNonArchivedCourses(): Observable<any[]> {  \n    return this.http.get<any[]>(`${this.apiUrl}/non-archivees`);\n  }\n}\n"],"mappings":";;AAOA,OAAM,MAAOA,aAAa;EAGxBC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IAFhB,KAAAC,MAAM,GAAG,sCAAsC,CAAC,CAAC;EAElB;EAEvC;EACAC,aAAaA,CAAA;IACX,OAAO,IAAI,CAACF,IAAI,CAACG,GAAG,CAAQ,GAAG,IAAI,CAACF,MAAM,MAAM,CAAC;EACnD;EAEA;EACAG,aAAaA,CAACC,EAAU;IACtB,OAAO,IAAI,CAACL,IAAI,CAACG,GAAG,CAAM,GAAG,IAAI,CAACF,MAAM,IAAII,EAAE,EAAE,CAAC;EACnD;EAEA;EACAC,mBAAmBA,CAACC,KAAa,EAAEC,IAAU;IAC3C,MAAMC,QAAQ,GAAG,IAAIC,QAAQ,EAAE;IAC/BD,QAAQ,CAACE,MAAM,CAAC,OAAO,EAAEJ,KAAK,CAAC;IAC/BE,QAAQ,CAACE,MAAM,CAAC,MAAM,EAAEH,IAAI,CAAC;IAE7B,OAAO,IAAI,CAACR,IAAI,CAACY,IAAI,CAAM,GAAG,IAAI,CAACX,MAAM,SAAS,EAAEQ,QAAQ,CAAC;EAC/D;EAEA;EACAI,WAAWA,CAACC,QAAgB;IAC1B,OAAO,IAAI,CAACd,IAAI,CAACG,GAAG,CAAC,GAAG,IAAI,CAACF,MAAM,QAAQa,QAAQ,EAAE,EAAE;MAAEC,YAAY,EAAE;IAAM,CAAE,CAAC;EAClF;EAEA;EACAC,aAAaA,CAACF,QAAgB;IAC5B,OAAO,IAAI,CAACd,IAAI,CAACiB,GAAG,CAAO,GAAG,IAAI,CAAChB,MAAM,YAAYa,QAAQ,EAAE,EAAE,EAAE,CAAC;EACtE;EAEA;EACAI,eAAeA,CAACJ,QAAgB;IAC9B,OAAO,IAAI,CAACd,IAAI,CAACiB,GAAG,CAAO,GAAG,IAAI,CAAChB,MAAM,cAAca,QAAQ,EAAE,EAAE,EAAE,CAAC;EACxE;EAEA;EACAK,wBAAwBA,CAAA;IACtB,OAAO,IAAI,CAACnB,IAAI,CAACG,GAAG,CAAQ,GAAG,IAAI,CAACF,MAAM,gBAAgB,CAAC;EAC7D;;;uBA1CWH,aAAa,EAAAsB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;IAAA;EAAA;;;aAAbzB,aAAa;MAAA0B,OAAA,EAAb1B,aAAa,CAAA2B,IAAA;MAAAC,UAAA,EAFZ;IAAM;EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}